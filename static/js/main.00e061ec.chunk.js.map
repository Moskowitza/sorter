{"version":3,"sources":["reducers.js","components/RobotCard.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","RobotCard","_ref","name","email","id","react_default","a","createElement","Card_default","style","width","Img","alt","src","concat","Body","Title","Text","CardList","Row_default","map","robot","i","Col_default","key","sm","components_RobotCard","defaultProps","SearchBox","labelText","onChange","htmlFor","className","type","aria-label","aria-required","placeholder","value","Scroll","props","children","overflowY","border","height","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","React","Component","App","onRequestRobots","_this$props","_this$props2","onSearchChange","filteredRobots","filter","toLowerCase","includes","Container_default","components_SearchBox","components_Scroll","components_ErrorBoundary","fluid","components_CardList","connect","searchRobots","requestRobots","dispatch","event","target","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","arguments","length","undefined","action","assign","logger","createLogger","store","createStore","applyMiddleware","ReduxThunk","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.00e061ec.chunk.js","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: '',\n};\n// eslint-disable-next-line import/prefer-default-export\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: '',\n};\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport PropTypes from 'prop-types';\n\nconst RobotCard = ({ name, email, id }) => (\n  <Card style={{ width: '18rem' }}>\n    <Card.Img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n    <Card.Body>\n      <Card.Title>{name}</Card.Title>\n      <Card.Text>{email}</Card.Text>\n    </Card.Body>\n  </Card>\n);\n\nRobotCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n};\nexport default RobotCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport RobotCard from './RobotCard';\n\nconst CardList = ({ robots }) => (\n\n  <Row>\n    {robots.map((robot, i) => (\n      <Col key={robots[i].id} sm>\n        <RobotCard\n          key={robots[i].id}\n          id={robots[i].id}\n          name={robots[i].name}\n          email={robots[i].email}\n        />\n      </Col>\n    ))\n      }\n  </Row>\n\n);\n\nCardList.defaultProps = {\n  robots: [],\n};\nCardList.propTypes = {\n  robots: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  })),\n\n};\nexport default CardList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nconst SearchBox = ({\n  labelText, name, searchField, onChange,\n}) => (\n  <Row>\n    <Col>\n      <label htmlFor={name}>\n        <input\n          className=\"pa3 ba b--green bg-lightest-blue\"\n          type=\"search\"\n          aria-label={labelText}\n          aria-required=\"true\"\n          placeholder={searchField}\n          onChange={onChange}\n          value={searchField}\n          id={name}\n          name={name}\n        />\n      </label>\n    </Col>\n  </Row>\n);\nSearchBox.defaultProps = {\n  labelText: '',\n  searchField: '',\n  name: '',\n  onChange: () => {},\n};\nSearchBox.propTypes = {\n  labelText: PropTypes.string,\n  searchField: PropTypes.string,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n};\nexport default SearchBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Scroll = (props) => {\n  const { children } = props;\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\n      {children}\n    </div>\n  );\n};\n\nScroll.propTypes = {\n  children: PropTypes.node.isRequired,\n};\nexport default Scroll;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // Display fallback UI\n    // logErrorToMyService(error, info);\n\n    this.setState({ hasError: true });\n    // You can also log the error to an error reporting service\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n    if (hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n    return children;\n  }\n}\nErrorBoundary.defaultProps = {\n  children: React.createElement('div'),\n};\nErrorBoundary.propTypes = {\n  children: PropTypes.node,\n};\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { setSearchField, requestRobots } from '../actions';\nimport './App.css';\n\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error,\n});\nconst mapDispatchToProps = dispatch => ({\n\n  onSearchChange: (event) => {\n    const { value } = event.target;\n    dispatch(setSearchField(value));\n  },\n  onRequestRobots: () => {\n    dispatch(requestRobots()); // using redux thunk\n  },\n});\n\nclass App extends Component {\n  componentDidMount() {\n    const { onRequestRobots } = this.props;\n    onRequestRobots();\n  }\n\n  render() {\n    const { robots, isPending, error } = this.props;\n    const { searchField, onSearchChange } = this.props;\n    // eslint-disable-next-line max-len\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n    return isPending\n      ? <h1>Loading</h1>\n      : (\n        <div className=\"tc\">\n          <Container>\n            <Row>\n              <h1 className=\"f1\">RoboFriends</h1>\n            </Row>\n            <SearchBox name=\"searchField\" labelText=\"Search Robots\" searchField={searchField} onChange={onSearchChange} />\n          </Container>\n          {error ? (<h2>{error}</h2>)\n\n            : (\n              <Scroll>\n                <ErrorBoundary>\n                  <Container fluid=\"true\">\n                    <CardList robots={filteredRobots} />\n                  </Container>\n                </ErrorBoundary>\n              </Scroll>\n            )\n          }\n        </div>\n      );\n  }\n}\nApp.defaultProps = {\n  searchField: '',\n  isPending: true,\n  robots: [],\n  error: '',\n};\nApp.propTypes = {\n  searchField: PropTypes.string,\n  error: PropTypes.string,\n  isPending: PropTypes.bool,\n  onSearchChange: PropTypes.func.isRequired,\n  onRequestRobots: PropTypes.func.isRequired,\n  robots: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    id: PropTypes.number,\n    address: PropTypes.shape({\n      street: PropTypes.string,\n      suite: PropTypes.string,\n      city: PropTypes.string,\n      zipcode: PropTypes.string,\n      geo: PropTypes.shape({\n        lat: PropTypes.string,\n        lng: PropTypes.string,\n      }),\n    }),\n    phone: PropTypes.string,\n    website: PropTypes.string,\n    company: PropTypes.shape({\n      name: PropTypes.string,\n      catchPhrase: PropTypes.string,\n      bs: PropTypes.string,\n    }),\n  })),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","// eslint-disable-next-line import/prefer-default-export\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport ReduxThunk from 'redux-thunk';\nimport './index.css';\nimport { searchRobots, requestRobots } from './reducers';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(ReduxThunk, logger));\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}